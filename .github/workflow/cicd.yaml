name: Deploy Application Docker Image to Azure VM

on:
  push:
    branches: [ main ]

jobs:
  Continuous-Integration:
    name: CI - Build & Push to ACR
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1. Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      # 2. Build & Push to ACR
      - name: Build and Push Docker image to ACR
        id: build
        run: |
          set -euo pipefail
          ACR_NAME="${{ secrets.ACR_REPO }}"                 # e.g. medicalchatbot
          ACR_LOGIN_SERVER="${{ secrets.ACR_LOGIN_SERVER }}" # e.g. medicalchatbot.azurecr.io
          IMAGE_NAME="medicalchatbot-app"
          IMAGE_TAG="latest"

          echo "Logging into ACR..."
          az acr login --name "$ACR_NAME"

          echo "Building Docker image..."
          docker build -t "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" .

          echo "Pushing Docker image..."
          docker push "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"

          echo "image=$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  Continuous-Deployment:
    name: CD - Deploy on Azure VM
    needs: Continuous-Integration
    runs-on: [ self-hosted, Linux, X64 ]   # match your VMâ€™s runner labels

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1. Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      # 2. Login to ACR
      - name: Login to ACR
        run: |
          az acr login --name "${{ secrets.ACR_REPO }}"

      # 3. Pull and Run container
      - name: Run Docker container on VM
        run: |
          set -euo pipefail
          IMAGE="${{ needs.Continuous-Integration.outputs.image }}"
          CONTAINER_NAME="medicalchatbot-container"

          echo "Pulling image: $IMAGE"
          docker pull "$IMAGE"

          echo "Stopping old container (if running)..."
          docker stop "$CONTAINER_NAME" || true
          docker rm "$CONTAINER_NAME" || true

          echo "Running new container..."
          docker run -d \
            --name "$CONTAINER_NAME" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            -p 8080:8080 \
            "$IMAGE"
