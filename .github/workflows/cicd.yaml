name: Deploy Application Docker Image to Azure VM

# allow workflow to request id tokens (required by azure/login when using OIDC in some flows)
permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: CI - Build & Push to ACR
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set vars
        run: |
          echo "IMAGE_NAME=medicalchatbot-app" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "ACR_NAME=${{ secrets.ACR_REPO }}" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}" >> $GITHUB_ENV

      # Login to Azure using service principal JSON (creds)
      - name: Azure Login (CI)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR (az cli)
        run: |
          az acr login --name ${{ secrets.ACR_REPO }}

      - name: Build Docker image
        run: |
          docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker image
        run: |
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG

      - name: Set image output
        id: set-image
        run: |
          echo "image=$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: CD - Deploy to Azure VM (self-hosted)
    needs: build
    runs-on: self-hosted      # your Azure VM runner must be online and labeled accordingly
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login to Azure on the runner using the same credentials
      - name: Azure Login (CD)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR on runner
        run: |
          az acr login --name ${{ secrets.ACR_REPO }}

      - name: Pull and run container
        run: |
          ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}
          IMAGE_NAME=medicalchatbot-app
          IMAGE_TAG=latest
          CONTAINER_NAME=medicalchatbot-container

          echo "Pulling image $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG ..."
          docker pull $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG

          echo "Stopping old container (if exists)..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "Running new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            -p 8080:8080 \
            $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG

